Client_id = "7o6lggeaV10nJDvfn27tKhvpkcA1zzUW"
Client_secret = "TQANoOyYSo2iwgCj"
Developer_id = "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MDQ4MTY5MDUsInJvbGUiOiJhZG1pbiIsImlkIjoiZWNkMTAwM2YzODJlNWEzZjU0NGQyZjFkY2Y0Njc1YzYiLCJ0ZW5hbnQiOiJ0ZW5hbnRfbXJwdGF4M25tejRncXp6c21yM2c0NXRybzQyZzIydHZtNXF4dXpkZG9mc2d1M3Rnb3Y0Z3M2dGNuNXd3bTR0dGdxemd5M3krIiwibmFtZSI6ImFkbWluIn0.oeSPpOk1t3a180pbPVAhq5AnrJeLlMcH6d3ZZ8N4cgAl4QeeGD4pu2dVV_rb8ks9KxOh0hFWOrDjB0Jfwqkcbw"

# note: Developer-Id and Authorization are in header

# get token 
endpoint : "https://api.knurld.io/oauth/client_credential/accesstoken?grant_type=client_credentials"
params : {"client_id":"$CLIENT_ID", "client_secret": "$CLIENT_SECRET" }
returns: "dict, extract 'access_token'"

# create model
endpoint : "https://api.knurld.io/v1/app-models"
params : {"enrollmentRepeats":3,"vocabulary":["Amber","Crimson","Ivory","Octagon","Pyramid"],"verificationLength":3,
			"Authorization": "Bearer $AUTH_TOKEN", "Developer-Id": "Bearer: $DEVELOPER_ID"}
returns: "url to model with these params"

# create consumer
endpoint : "https://api.knurld.io/v1/consumers"
params : {"Gender":"M","Username":"$USERNAME","Password":"$PASSWORD",
			"Authorization": "Bearer $AUTH_TOKEN", "Developer-Id": "Bearer: $DEVELOPER_ID"}
returns: "url to model with these params"

# get consumer
endpoint : "https://api.knurld.io/v1/consumers/$CONSUMER_ID"
params : {"Authorization": "Bearer $AUTH_TOKEN", "Developer-Id": "Bearer: $DEVELOPER_ID"}
returns: "dict of user details"

# authenticate user
endpoint : "https://api.knurld.io/v1/consumers/token"
params : {"Username":"$USERNAME","Password":"$PASSWORD",
			"Authorization": "Bearer $AUTH_TOKEN", "Developer-Id": "Bearer: $DEVELOPER_ID"}
returns: "token"

# enroll user to model
endpoint : "https://api.knurld.io/v1/consumers/token"
params : {"consumer":"$CONSUMER_URL","application":"$APPLICATION_URL",
			"Authorization": "Bearer $AUTH_TOKEN", "Developer-Id": "Bearer: $DEVELOPER_ID"}
returns: "href to enrollment"

# populate enrollment
# It’s important to have a gap of at least 500ms between each phrase utterance in the enrollment audio.
# Each utterance of a phrase should be at least 600ms in duration.
endpoint : "https://api.knurld.io/v1/consumers/token"
params : {"enrollment.wav":"$URL to audio recording wav",
			"intervals":"[{“phrase”: “Chicago”, “start”: 0, “stop”: 1500},...]",
			"Authorization": "Bearer $AUTH_TOKEN", "Developer-Id": "Bearer: $DEVELOPER_ID"}
returns: "href to enrollment instance"

# poll to see if model trained (returned dict[:status] should be "Completed")
endpoint : "https://api.knurld.io/v1/consumers/token"
params : {"Authorization": "Bearer $AUTH_TOKEN", "Developer-Id": "Bearer: $DEVELOPER_ID"}
returns: "dict with stuff"

# initiate verification (associate user to app-model)
endpoint : "https://api.knurld.io/v1/consumers/token"
params : {"consumer":"$CONSUMER_URL","application":"$APPLICATION_URL",
			"Authorization": "Bearer $AUTH_TOKEN", "Developer-Id": "Bearer: $DEVELOPER_ID"}
returns: "href to verification instance,if consumer vocieprint exists"

# actually verify (poll)
endpoint : "https://api.knurld.io/v1/verifications/$VERIFICATION_ID"
params : {"Authorization": "Bearer $AUTH_TOKEN", "Developer-Id": "Bearer: $DEVELOPER_ID"}
returns: "dict, look for 'verified', should be true"

# to find intervals of words in audio file
endpoint : "https://api.knurld.io/v1/endpointAnalysis/url"
params : {"Authorization": "Bearer $AUTH_TOKEN", "Developer-Id": "Bearer: $DEVELOPER_ID",
		  "filedata": "$WAV_AUDIO_FILE", "num_words": "3"}
returns: "dict containing taskname"

# (poll) status of above request
endpoint : "https://api.knurld.io/v1/endpointAnalysis/{id}"
params : {"Authorization": "Bearer $AUTH_TOKEN", "Developer-Id": "Bearer: $DEVELOPER_ID"}
returns: "dict with invtervals, if found"